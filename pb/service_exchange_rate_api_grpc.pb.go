// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service_exchange_rate_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangeRateAPIClient is the client API for ExchangeRateAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeRateAPIClient interface {
	GetRate(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetRateResponse, error)
	GetBuy(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetBuyResponse, error)
	GetSell(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetSellResponse, error)
}

type exchangeRateAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeRateAPIClient(cc grpc.ClientConnInterface) ExchangeRateAPIClient {
	return &exchangeRateAPIClient{cc}
}

func (c *exchangeRateAPIClient) GetRate(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetRateResponse, error) {
	out := new(GetRateResponse)
	err := c.cc.Invoke(ctx, "/pb.ExchangeRateAPI/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateAPIClient) GetBuy(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetBuyResponse, error) {
	out := new(GetBuyResponse)
	err := c.cc.Invoke(ctx, "/pb.ExchangeRateAPI/GetBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRateAPIClient) GetSell(ctx context.Context, in *GetRateRequest, opts ...grpc.CallOption) (*GetSellResponse, error) {
	out := new(GetSellResponse)
	err := c.cc.Invoke(ctx, "/pb.ExchangeRateAPI/GetSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeRateAPIServer is the server API for ExchangeRateAPI service.
// All implementations must embed UnimplementedExchangeRateAPIServer
// for forward compatibility
type ExchangeRateAPIServer interface {
	GetRate(context.Context, *GetRateRequest) (*GetRateResponse, error)
	GetBuy(context.Context, *GetRateRequest) (*GetBuyResponse, error)
	GetSell(context.Context, *GetRateRequest) (*GetSellResponse, error)
	mustEmbedUnimplementedExchangeRateAPIServer()
}

// UnimplementedExchangeRateAPIServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeRateAPIServer struct {
}

func (UnimplementedExchangeRateAPIServer) GetRate(context.Context, *GetRateRequest) (*GetRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedExchangeRateAPIServer) GetBuy(context.Context, *GetRateRequest) (*GetBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuy not implemented")
}
func (UnimplementedExchangeRateAPIServer) GetSell(context.Context, *GetRateRequest) (*GetSellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSell not implemented")
}
func (UnimplementedExchangeRateAPIServer) mustEmbedUnimplementedExchangeRateAPIServer() {}

// UnsafeExchangeRateAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeRateAPIServer will
// result in compilation errors.
type UnsafeExchangeRateAPIServer interface {
	mustEmbedUnimplementedExchangeRateAPIServer()
}

func RegisterExchangeRateAPIServer(s grpc.ServiceRegistrar, srv ExchangeRateAPIServer) {
	s.RegisterService(&ExchangeRateAPI_ServiceDesc, srv)
}

func _ExchangeRateAPI_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateAPIServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExchangeRateAPI/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateAPIServer).GetRate(ctx, req.(*GetRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRateAPI_GetBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateAPIServer).GetBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExchangeRateAPI/GetBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateAPIServer).GetBuy(ctx, req.(*GetRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRateAPI_GetSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRateAPIServer).GetSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExchangeRateAPI/GetSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRateAPIServer).GetSell(ctx, req.(*GetRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeRateAPI_ServiceDesc is the grpc.ServiceDesc for ExchangeRateAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeRateAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ExchangeRateAPI",
	HandlerType: (*ExchangeRateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRate",
			Handler:    _ExchangeRateAPI_GetRate_Handler,
		},
		{
			MethodName: "GetBuy",
			Handler:    _ExchangeRateAPI_GetBuy_Handler,
		},
		{
			MethodName: "GetSell",
			Handler:    _ExchangeRateAPI_GetSell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_exchange_rate_api.proto",
}
